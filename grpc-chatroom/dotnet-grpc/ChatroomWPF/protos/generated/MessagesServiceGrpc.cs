// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/messages_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class MessagesService
{
  static readonly string __ServiceName = "MessagesService";

  static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (message is global::Google.Protobuf.IBufferMessage)
    {
      context.SetPayloadLength(message.CalculateSize());
      global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
      context.Complete();
      return;
    }
    #endif
    context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
  }

  static class __Helper_MessageCache<T>
  {
    public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
  }

  static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
  {
    #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
    if (__Helper_MessageCache<T>.IsBufferMessage)
    {
      return parser.ParseFrom(context.PayloadAsReadOnlySequence());
    }
    #endif
    return parser.ParseFrom(context.PayloadAsNewBuffer());
  }

  static readonly grpc::Marshaller<global::Message> __Marshaller_Message = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Message.Parser));
  static readonly grpc::Marshaller<global::SendMessageResponse> __Marshaller_SendMessageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SendMessageResponse.Parser));
  static readonly grpc::Marshaller<global::EmptyRequest> __Marshaller_EmptyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmptyRequest.Parser));
  static readonly grpc::Marshaller<global::GetMessagesResponse> __Marshaller_GetMessagesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GetMessagesResponse.Parser));

  static readonly grpc::Method<global::Message, global::SendMessageResponse> __Method_SendMessage = new grpc::Method<global::Message, global::SendMessageResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "SendMessage",
      __Marshaller_Message,
      __Marshaller_SendMessageResponse);

  static readonly grpc::Method<global::EmptyRequest, global::GetMessagesResponse> __Method_GetMessages = new grpc::Method<global::EmptyRequest, global::GetMessagesResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetMessages",
      __Marshaller_EmptyRequest,
      __Marshaller_GetMessagesResponse);

  static readonly grpc::Method<global::Message, global::GetMessagesResponse> __Method_GetMessagesAfter = new grpc::Method<global::Message, global::GetMessagesResponse>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetMessagesAfter",
      __Marshaller_Message,
      __Marshaller_GetMessagesResponse);

  static readonly grpc::Method<global::EmptyRequest, global::Message> __Method_GetNewMessages = new grpc::Method<global::EmptyRequest, global::Message>(
      grpc::MethodType.ServerStreaming,
      __ServiceName,
      "GetNewMessages",
      __Marshaller_EmptyRequest,
      __Marshaller_Message);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::MessagesServiceReflection.Descriptor.Services[0]; }
  }

  /// <summary>Client for MessagesService</summary>
  public partial class MessagesServiceClient : grpc::ClientBase<MessagesServiceClient>
  {
    /// <summary>Creates a new client for MessagesService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public MessagesServiceClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for MessagesService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public MessagesServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected MessagesServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected MessagesServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    /// <summary>
    ///*
    /// Add message.
    ///
    /// NOTE: As a crude form of authentication, when sending a new message,
    /// the Author attribute MUST be the Author's Id (secret) instead of their nick (public).
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::SendMessageResponse SendMessage(global::Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SendMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///*
    /// Add message.
    ///
    /// NOTE: As a crude form of authentication, when sending a new message,
    /// the Author attribute MUST be the Author's Id (secret) instead of their nick (public).
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::SendMessageResponse SendMessage(global::Message request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_SendMessage, null, options, request);
    }
    /// <summary>
    ///*
    /// Add message.
    ///
    /// NOTE: As a crude form of authentication, when sending a new message,
    /// the Author attribute MUST be the Author's Id (secret) instead of their nick (public).
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::SendMessageResponse> SendMessageAsync(global::Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SendMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///*
    /// Add message.
    ///
    /// NOTE: As a crude form of authentication, when sending a new message,
    /// the Author attribute MUST be the Author's Id (secret) instead of their nick (public).
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::SendMessageResponse> SendMessageAsync(global::Message request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_SendMessage, null, options, request);
    }
    /// <summary>
    ///*
    /// Return all messages.
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::GetMessagesResponse GetMessages(global::EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetMessages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///*
    /// Return all messages.
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::GetMessagesResponse GetMessages(global::EmptyRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetMessages, null, options, request);
    }
    /// <summary>
    ///*
    /// Return all messages.
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::GetMessagesResponse> GetMessagesAsync(global::EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetMessagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///*
    /// Return all messages.
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::GetMessagesResponse> GetMessagesAsync(global::EmptyRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetMessages, null, options, request);
    }
    /// <summary>
    ///*
    /// Return all messages after `targetMessage`.
    ///
    /// Like, if we have a list `{A, B, C, D, E}` and we call `GetMessagesAfter(C)`, it will return `{D, E}`.
    /// `GetMessagesAfter(E)` would send an empty list `{}`.
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::GetMessagesResponse GetMessagesAfter(global::Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetMessagesAfter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///*
    /// Return all messages after `targetMessage`.
    ///
    /// Like, if we have a list `{A, B, C, D, E}` and we call `GetMessagesAfter(C)`, it will return `{D, E}`.
    /// `GetMessagesAfter(E)` would send an empty list `{}`.
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::GetMessagesResponse GetMessagesAfter(global::Message request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetMessagesAfter, null, options, request);
    }
    /// <summary>
    ///*
    /// Return all messages after `targetMessage`.
    ///
    /// Like, if we have a list `{A, B, C, D, E}` and we call `GetMessagesAfter(C)`, it will return `{D, E}`.
    /// `GetMessagesAfter(E)` would send an empty list `{}`.
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::GetMessagesResponse> GetMessagesAfterAsync(global::Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetMessagesAfterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///*
    /// Return all messages after `targetMessage`.
    ///
    /// Like, if we have a list `{A, B, C, D, E}` and we call `GetMessagesAfter(C)`, it will return `{D, E}`.
    /// `GetMessagesAfter(E)` would send an empty list `{}`.
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::GetMessagesResponse> GetMessagesAfterAsync(global::Message request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetMessagesAfter, null, options, request);
    }
    /// <summary>
    ///*
    /// Subscribe for new messages.
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncServerStreamingCall<global::Message> GetNewMessages(global::EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetNewMessages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    ///*
    /// Subscribe for new messages.
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncServerStreamingCall<global::Message> GetNewMessages(global::EmptyRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncServerStreamingCall(__Method_GetNewMessages, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override MessagesServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new MessagesServiceClient(configuration);
    }
  }

}
#endregion
